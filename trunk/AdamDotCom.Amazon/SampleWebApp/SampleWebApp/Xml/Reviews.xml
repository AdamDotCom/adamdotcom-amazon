<?xml version="1.0" encoding="utf-8"?>
<ArrayOfReview xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Review>
    <Summary>Easy to read, informative, unique, but wordy at times.</Summary>
    <Content>Design Patterns Explained, is easy to read, informative, and like the title suggests, offers a truly new unique perspective on design patterns.
&lt;br /&gt;
&lt;br /&gt;I enjoyed how the authors extend the software "construction" metaphor (software architecture, scaffolding, plugging in code, etc...) a couple steps further, drawing parallels with Christopher Alexander's (a well known architect's) essay The Nature of Order: An Essay on the Art of Building and the Nature of the Universe. In this particular essay Alexander attempts to decompose good architectural design into patterns and the authors of this book clearly take Alexander's work into the realm of design patterns. 
&lt;br /&gt;Similarly fascinating were the parallels drawn from anthropologist Ruth Benedict's work, where the authors suggest that good design is culturally transcending.
&lt;br /&gt;
&lt;br /&gt;Design Patterns Explained is a nice supplement to Design Patterns: Elements of Reusable Object-Oriented Software [Gamma, et. al.] and should be read concurrently. As other reviews have pointed out; this book does tend to be verbose in sections, it digresses at moments, and is targeted at the introductory (journeyman) level.
&lt;br /&gt;Regardless, it's an interesting read.</Content>
    <Date>2006-03-22T00:00:00</Date>
    <HelpfulVotes>12</HelpfulVotes>
    <TotalVotes>12</TotalVotes>
    <Rating>4</Rating>
    <ASIN>0321247140</ASIN>
    <Title>Design Patterns Explained: A New Perspective on Object-Oriented Design (2nd Edition) (Software Patterns Series)</Title>
    <AuthorsMLA>Shalloway Alan, and Trott James.</AuthorsMLA>
    <Authors>Alan Shalloway, James Trott</Authors>
    <Url>http://www.amazon.com/Design-Patterns-Explained-Perspective-Object-Oriented/dp/0321247140%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0321247140</Url>
    <ImageUrl>http://images.amazon.com/images/P/0321247140.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Addison-Wesley Professional</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0321247140?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321247140</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>Fun, Enjoyable, Easy to read. Excellent prerequisite for Code Complete.</Summary>
    <Content>The Pragmatic Programmer: From Journeyman to Master, should be read by anyone involved with the software industry. The tone of this book is casual and often humorous making it fun, enjoyable and easy to read.
&lt;br /&gt;
&lt;br /&gt;As the title implies, this book is targeted towards the programmer or developer (the construction phase of software engineering). The text outlines principals and practices that are common sense, but that every practitioner SHOULD be aware of. However, in reality most of these principals and practices are overlooked. The book borders on the obvious, but keep in mind that "the obvious ... is never seen until someone expresses it simply." (Kahlil Gibran) The authors express good programming principals, outline the collection of tools every practitioner should have, and offer priceless advice in a simple manner.
&lt;br /&gt;
&lt;br /&gt;I found the authors offering a lot of "Hows" and "Whats" with out answering the "Whys". Code Complete [Steve McConnell]  answers most (if not all) of these questions and in doing so, is three times the size. The Pragmatic Programmer is also somewhat short-lived - a new edition should be in the making. For example the collection of tools described within the text is changing (Subversion seems to be replacing CVS, etc...). 
&lt;br /&gt;
&lt;br /&gt;It's interesting to note that both authors (Andrew Hunt, David Thomas) are authors of the Agile Manifesto, and have a series of Pragmatic Programming books (Pragmatic AJAX, Agile Web Development with Rails, Programming Ruby, etc...). 
&lt;br /&gt;Their other texts are equally humorous and easy to read.
&lt;br /&gt;
&lt;br /&gt;The Pragmatic Programmer makes an excellent prerequisite to Code Complete. I can attest the "[Pragmatic Programmer] will help you become a better programmer" (Preface), but reading additional software engineering resources will make you an even better programmer.</Content>
    <Date>2006-03-23T00:00:00</Date>
    <HelpfulVotes>9</HelpfulVotes>
    <TotalVotes>9</TotalVotes>
    <Rating>5</Rating>
    <ASIN>020161622X</ASIN>
    <Title>The Pragmatic Programmer: From Journeyman to Master</Title>
    <AuthorsMLA>Hunt Andrew, and Thomas David.</AuthorsMLA>
    <Authors>Andrew Hunt, David Thomas</Authors>
    <Url>http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D020161622X</Url>
    <ImageUrl>http://images.amazon.com/images/P/020161622X.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Addison-Wesley Professional</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/020161622X?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>Clear, Concise, Easy to understand. The Holy Grail of programming references. A must-read for professional programmers.</Summary>
    <Content>Code Complete by Steve McConnell is the convergence (the crossroads) of experience, research, and theory. This book is invaluable, the Holy Grail of programming reference books. McConnell's writing style is clear, concise, easy to understand and often humorous.
&lt;br /&gt;
&lt;br /&gt;Programmers on every level (from introduction to master) will benefit from reading this book. Programmers at the introduction level may find some topics advanced, but references to additional resources are close at hand. This book covers a broad range of interconnected topics ranging from: variable names, code-tuning, personal character, managing your manager, gonzo programming and much more. The emphasis is always on successful software design techniques.
&lt;br /&gt;
&lt;br /&gt;McConnell doesn't shy away from presenting hard data and details; he nails the "whys" that so many other texts avoid.
&lt;br /&gt;
&lt;br /&gt;Selected quotes from Code Complete: 
&lt;br /&gt;
&lt;br /&gt;"People have already made all the mistakes that you're making now, and unless you're a glutton for punishment, you'll prefer reading their books and avoiding their mistakes to inventing new versions of old problems." (Chapter 35)
&lt;br /&gt;
&lt;br /&gt;"Once a programmer realizes that programming principles transcend the syntax of any specific language, the doors swing open to knowledge that truly makes a difference in quality and productivity." (Preface)
&lt;br /&gt;
&lt;br /&gt;"The value of hands-on experience as compared to book learning is smaller in software development than in many other fields" (Chapter 35)
&lt;br /&gt;
&lt;br /&gt;It's interesting to note that Code Complete is a required read to become a practitioner (intermediate) level employee in McConnell's company (Construx).
&lt;br /&gt;
&lt;br /&gt;Code Complete is often compared with The Pragmatic Programmer: From Journeyman to Master [Hunt, Andrew, and Thomas, David]; the topics covered in the Pragmatic Programmer are a small subset of Code Complete. Code Complete is consistently written at a higher level, and offers more references for continual research and professional development. But don't take my word for it; read both, the Pragmatic Programmer makes a good prerequisite to Code Complete. 
&lt;br /&gt;
&lt;br /&gt;Hailing this book as "The Holy Grail of programming references" may seem fanatical, but I have yet to find a book that remotely measures up to Code Complete.</Content>
    <Date>2006-03-24T00:00:00</Date>
    <HelpfulVotes>25</HelpfulVotes>
    <TotalVotes>28</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0735619670</ASIN>
    <Title>Code Complete: A Practical Handbook of Software Construction</Title>
    <AuthorsMLA>McConnell Steve.</AuthorsMLA>
    <Authors>Steve McConnell</Authors>
    <Url>http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0735619670</Url>
    <ImageUrl>http://images.amazon.com/images/P/0735619670.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Microsoft Press</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0735619670?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>Professional, Terse, Stimulating. A great reference.</Summary>
    <Content>Robert L. Glass presents a collection of facts and fallacies that are frequently forgotten, and fundamental to building software. Glass best states the purpose for writing this book; while reading the book you may find yourself thinking: "'oh, yeah, I remember that one' and then muse about why you forgot it over the years." (Introduction). 
&lt;br /&gt;
&lt;br /&gt;For each fact or fallacy, Glass provides a discussion, the controversies involved, and additional references. The discussions bring together Glass's extensive computing experience (50 years), his research and numerous references (from both academics and practitioners). Glass consistently emphasizes the importance and need for remaining objective.
&lt;br /&gt;
&lt;br /&gt;Glass's writing style is professional, and terse, but the experience and content embodied within this text is invaluable. This is an excellent book, a stimulating read, a source of inspiration.
&lt;br /&gt;
&lt;br /&gt;Selected quotes:
&lt;br /&gt;
&lt;br /&gt;"Fact 16: Reuse-in-the-large (components) remains a mostly unsolved problem, even though everyone agrees it is important and desirable" (Chapter 1)
&lt;br /&gt;
&lt;br /&gt;"Fallacy 3: Programming can and should be egoless." (Chapter 5)
&lt;br /&gt;
&lt;br /&gt;"Fallacy 8: Given enough eyeballs, all bugs are shallow. (Linus's Law)" (Chapter 5)
&lt;br /&gt;
&lt;br /&gt;This book is for ANYONE interested in building software (practitioners, managers, team leaders, students, faculty, researchers, etc...).</Content>
    <Date>2006-04-05T00:00:00</Date>
    <HelpfulVotes>2</HelpfulVotes>
    <TotalVotes>2</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0321117425</ASIN>
    <Title>Facts and Fallacies of Software Engineering (Agile Software Development)</Title>
    <AuthorsMLA>Glass L. Robert.</AuthorsMLA>
    <Authors>Robert L. Glass</Authors>
    <Url>http://www.amazon.com/Facts-Fallacies-Software-Engineering-Development/dp/0321117425%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0321117425</Url>
    <ImageUrl>http://images.amazon.com/images/P/0321117425.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Addison-Wesley Professional</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0321117425?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321117425</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>One of the most influential software engineering books ever, a timeless classic, prophetic at moments.</Summary>
    <Content>The Mythical Man-Month (M M-M) [Frederick P. Brooks] is often referred to as the most influential Software Engineering books ever. Despite being originally published in 1975 the content remains timeless, equally valuable today.
&lt;br /&gt;
&lt;br /&gt;The central theses of these essays revolve around conceptual integrity - maintaining the product focus in large systems (IBM's OS/360). Brooks touches on many other topics such as the need for a software process, how to manage a team, and the importance of distinguishing between the architecture, design, and development processes. Brooks approaches most subjects from an abstract (managerial) perspective requiring personal interpretation (reading between the lines).
&lt;br /&gt;
&lt;br /&gt;"If a system is to have conceptual integrity, someone must control the concepts." (Chapter 4)
&lt;br /&gt;
&lt;br /&gt;Throughout the book Brooks continually emphasizes the need for remaining analytical (objective), and his famed "No Silver Bullet" essay can be found in Chapter 16.
&lt;br /&gt;
&lt;br /&gt;"Not only are there no silver bullets now in view, the very nature of software makes it unlikely that there will be any-no inventions that will do for software productivity, reliability, and simplicity what electronics, transistors, and large-scale integration did for computer hardware." (Chapter 16)
&lt;br /&gt;
&lt;br /&gt;The Mythical Man-Month is enjoyable, a wealth of information, and  easy to read. Some readers may be discouraged, as this book requires personal interpretation, but in doing so the M M-M facilitates inspiration, introspection and debate. Anyone associated with the software industry (introduction level programmer through to management) can appreciate what Brooks has to say. 
&lt;br /&gt;
&lt;br /&gt;If you're looking for a comprehensive checklist or an immediately implemental solution then read what other authors like Steve McConnell (Code Complete: A Practical Handbook of Software Construction) and Robert L. Glass (Facts and Fallacies of Software Engineering) have to say.
&lt;br /&gt;
&lt;br /&gt;"The tar pit of software engineering will continue to be sticky for a long time to come." (Chapter 18)</Content>
    <Date>2006-04-09T00:00:00</Date>
    <HelpfulVotes>8</HelpfulVotes>
    <TotalVotes>10</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0201835959</ASIN>
    <Title>The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition (2nd Edition)</Title>
    <AuthorsMLA>Brooks P. Frederick.</AuthorsMLA>
    <Authors>Frederick P. Brooks</Authors>
    <Url>http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0201835959</Url>
    <ImageUrl>http://images.amazon.com/images/P/0201835959.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Addison-Wesley Professional</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0201835959?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201835959</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>A right hemisphere brain stimulant, an excellent book</Summary>
    <Content>The Art of Looking Sideways [Alan Fletcher] is inspirational, intelligent, invigorating, and stimulating. This book is a collage of witty text, images, metaphors, idioms, paradoxes, and humor. 
&lt;br /&gt;
&lt;br /&gt;I believe W. Todd Dominey (a preceding reviewer) said it best: 
&lt;br /&gt;"The Art of Looking Sideways is an instruction manual of sorts for adults to deconstruct their preconceived belief systems of reality. Readers are encouraged to look, see, explore, turn upside down, rip apart, and to ultimately rebuild that which everyday people believe to be true through a series of word plays, found quotations, paradoxes, and unusual truths. There are no answers. Just questions, and differences of perception."
&lt;br /&gt;
&lt;br /&gt;I use this book as a source of inspiration to regain mental clarity, a right hemisphere brain stimulant if you will. 
&lt;br /&gt;Five minutes of looking sideways is often the remedy for my worst mind block, leaving me reinvigorated with a fresh perspective. :)
&lt;br /&gt;
&lt;br /&gt;A philosophic question to ponder as you flip through this book: "Which way is up?"
&lt;br /&gt;
&lt;br /&gt;This is an excellent book.</Content>
    <Date>2006-04-10T00:00:00</Date>
    <HelpfulVotes>5</HelpfulVotes>
    <TotalVotes>5</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0714834491</ASIN>
    <Title>The Art of Looking Sideways</Title>
    <AuthorsMLA>Fletcher Alan.</AuthorsMLA>
    <Authors>Alan Fletcher</Authors>
    <Url>http://www.amazon.com/Art-Looking-Sideways-Alan-Fletcher/dp/0714834491%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0714834491</Url>
    <ImageUrl>http://images.amazon.com/images/P/0714834491.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Phaidon Press</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0714834491?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0714834491</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>An inspiration, an excellent book.</Summary>
    <Content>Design (Crash Course Series) [Thomas Hauffe] is a condensed history of design from the 18th through 20th century. Hauffe's writing style is interesting, informative and well thought-out. The book itself is visually stunning (a design feat in itself) with high quality images and an intuitive layout. Through the text, Hauffe explores the external influences - the developments and effects of technological advancements throughout time and the implications on design. 
&lt;br /&gt;
&lt;br /&gt;As a software engineer and an admirer of design / architecture, I find this small pocket book an excellent source of inspiration and an intriguing read. The factors influencing design also impact the realm of software design (a subset of design in general). 
&lt;br /&gt;Technical, economic, aesthetic, and social developments along with political, psychological, cultural, ecological, and global influences will continue to impact software design (and all types of design). Throughout the text we can see that design is an integral part of history, and that innovation has been happening for centuries (designers have been constantly improving existing ideas). We can also observe that design is iterative (cyclic) and often occurs in patterns (similar to design patterns in the software realm).
&lt;br /&gt;
&lt;br /&gt;This is an excellent book, a great source of inspiration. Many parallels can be drawn throughout this text and applied to any specific type of design. 
&lt;br /&gt;
&lt;br /&gt;We can learn more from history than we may think. Read!</Content>
    <Date>2006-04-11T00:00:00</Date>
    <HelpfulVotes>2</HelpfulVotes>
    <TotalVotes>3</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0812097726</ASIN>
    <Title>Design: An Illustrated Historical Overview (Crash Course Series)</Title>
    <AuthorsMLA>Hauffe Thomas.</AuthorsMLA>
    <Authors>Thomas Hauffe</Authors>
    <Url>http://www.amazon.com/Design-Illustrated-Historical-Overview-Course/dp/0812097726%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0812097726</Url>
    <ImageUrl>http://images.amazon.com/images/P/0812097726.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Barron's Educational Series</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0812097726?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0812097726</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>McConnell's high level approach to Project Management remains valuable even today. Be sure to read his more recent texts</Summary>
    <Content>The Software Project Survival Guide by Steve McConnell remains applicable today as when first published in 1995. McConnell has a clear knack for combining research, experience, and theory.  His writing style is clear, concise, and easy to understand. 
&lt;br /&gt;
&lt;br /&gt;McConnell approaches the topic of project management (design through to delivery) from a high abstract level; he outlines the best practices, provides comprehensive checklists, but leaves the fine details to other authors. McConnell States, "Whereas this book provides a big picture technical framework for a project, [Fergus] O'Connell's book focuses on the many specific activities a project manager must perform." (Part IV) 
&lt;br /&gt;
&lt;br /&gt;McConnell's writing style maintains a high sense of integrity and he always encourages personal research and development through his extensive use of external references.
&lt;br /&gt;
&lt;br /&gt;Selected quotes: 
&lt;br /&gt;"Software development is inherently an exercise in climbing steep learning curves - an exercise in problem solving - and the learning curves don't disappear" (Chapter 17)
&lt;br /&gt;
&lt;br /&gt;"No individual is a success who hurts the team, and no individual is a failure who helps it." (Chapter 18)
&lt;br /&gt;
&lt;br /&gt;This is an excellent book, a great reference; although a little too heavy to be comparable to the "first aid kit you carry in your backpack" (Chapter 20).
&lt;br /&gt;
&lt;br /&gt;The "Cone of Uncertainty" (chapter 3) and the "Survival Needs" section (chapter 1) were quite interesting. In the "Survival Needs" section McConnell draws many parallels with the basic human needs and the basic needs for a successful project. Similarly intriguing is his Project Team's Bill of Rights (chapter 1).
&lt;br /&gt;
&lt;br /&gt;Be sure to visit the book's website it provides the chapter checklists in digital form and many other useful resources.
&lt;br /&gt;
&lt;br /&gt;There is no one-size-fits-all or simple solution - this book is not an exception. Continue reading other project management books and some of McConnell's more recent texts like Software Estimation Demystifying the Black Art.</Content>
    <Date>2006-05-01T00:00:00</Date>
    <HelpfulVotes>11</HelpfulVotes>
    <TotalVotes>13</TotalVotes>
    <Rating>5</Rating>
    <ASIN>1572316217</ASIN>
    <Title>Software Project Survival Guide (Pro -- Best Practices)</Title>
    <AuthorsMLA>McConnell Steve.</AuthorsMLA>
    <Authors>Steve McConnell</Authors>
    <Url>http://www.amazon.com/Software-Project-Survival-Guide-Practices/dp/1572316217%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1572316217</Url>
    <ImageUrl>http://images.amazon.com/images/P/1572316217.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Microsoft Press</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/1572316217?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1572316217</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>A timeless software classic, a must read for every manager, and a source of inspiration for practitioners (software developers)</Summary>
    <Content>Peopleware: Productivity Projects and Teams [Tom DeMarco, Timothy Lister] was first published in 1987 - three decades later it is a revered classic. DeMarco and Lister focus on the human factor of software development (managing people). Through their 30 years of project management experience and consulting they share what went right, and more importantly, what went wrong - so we can learn from their mistakes.
&lt;br /&gt;
&lt;br /&gt;This series of essays cover a wide variety of topics ranging from: office environments that encourage work, the importance of the closed door (read: "cubicles are BAD"), the significance of "flow" and creativity, the dangers and hidden cost of turnover, the importance of hiring and keeping the right people, how to retain employees, how to encourage productivity, the importance of a "jelled team", the dangers of teamicide, how not to manage people, and many other equally interesting topics.
&lt;br /&gt;
&lt;br /&gt;Some quotes I found interesting: 
&lt;br /&gt;
&lt;br /&gt;"No one can really work much more than forty hours, at least not continually and with the level of intensity required for creative work." (Chapter 3)
&lt;br /&gt;
&lt;br /&gt;"the process of improving productivity risks worsening turnover" (Chapter 3)
&lt;br /&gt;
&lt;br /&gt;"People under time pressure don't work better; they just work faster." (Chapter 3)
&lt;br /&gt;
&lt;br /&gt;"People who had ten years of experience did not outperform those with two years of experience." (Chapter 3)
&lt;br /&gt;
&lt;br /&gt;"people who perform better tend to gravitate towards organizations that provide a better workplace." (Chapter 8)
&lt;br /&gt;
&lt;br /&gt;"the total cost of replacing each person is the equivalent of four-and-a-half to five months of employee cost or about twenty percent of the cost of keeping that employee for two years on the job." (Chapter 16)
&lt;br /&gt;
&lt;br /&gt;This book continues to change the way I view my job, organization, and career. Practitioners and authors like: Steve McConnell, Robert L. Glass, and Joel Spolsky heavily cite the industry-shattering truths originally exposed by Marco and Lister. This book should be on every professional's shelf along side other classics like: The Mythical Man-Month, and Code Complete.</Content>
    <Date>2007-07-08T00:00:00</Date>
    <HelpfulVotes>5</HelpfulVotes>
    <TotalVotes>5</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0932633439</ASIN>
    <Title>Peopleware: Productive Projects and Teams   (Second Edition)</Title>
    <AuthorsMLA>DeMarco Tom, and Lister Timothy.</AuthorsMLA>
    <Authors>Tom DeMarco, Timothy Lister</Authors>
    <Url>http://www.amazon.com/Peopleware-Productive-Projects-Teams-Second/dp/0932633439%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0932633439</Url>
    <ImageUrl>http://images.amazon.com/images/P/0932633439.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Dorset House Publishing Company, Incorporated</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0932633439?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0932633439</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>A great collection of interesting, humorous, software related writings. A great book to pass around the office when your done</Summary>
    <Content>The Best Software Writing I [Joel Spolsky], is a nicely rounded selection of essays, blog posts, and other intriguing software related tidbits weaved together by Joel Spolsky's witty dialog. This book is easy to read, light, humorous, and thought provoking. In an every changing software industry, books like this give us a broader picture of what's happening in the industry. It's a great book to read during your daily commute, pass around the office, leave in the bathroom, or give to a friend when your finished.
&lt;br /&gt;
&lt;br /&gt;I highly recommend this and other books by Spolsky, check out his blog too.</Content>
    <Date>2007-07-08T00:00:00</Date>
    <HelpfulVotes>1</HelpfulVotes>
    <TotalVotes>1</TotalVotes>
    <Rating>5</Rating>
    <ASIN>1590595009</ASIN>
    <Title>The Best Software Writing I: Selected and Introduced by Joel Spolsky</Title>
    <AuthorsMLA>Spolsky Joel.</AuthorsMLA>
    <Authors>Joel Spolsky</Authors>
    <Url>http://www.amazon.com/Best-Software-Writing-Selected-Introduced/dp/1590595009%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1590595009</Url>
    <ImageUrl>http://images.amazon.com/images/P/1590595009.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Apress</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/1590595009?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1590595009</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>An excellent cohesive reference, truly the definitive guide to JavaScript as we know it</Summary>
    <Content>This book is a fantastic reference. So many technical books typically live short lives, we use them once on a single project and never touch them again, however David Flanagan's JavaScript: The Definitive Guide has clear value and longevity. 
&lt;br /&gt;
&lt;br /&gt;This book provides 350+ pages of reference material for the Core JavaScript Language and Client-side JavaScript (the online Mozilla Developer Center is one of the few references that comes close to this level of comprehensive reference). In addition to these 350+ pages of reference material, there are 500+ pages of dialog that linearly walk us through the JavaScript fundamentals into more complex concepts. This books huge size (900+ pages) can be daunting, and is one definite drawback. Its sweeping breadth of topics (from JavaScript language operators to using Flash with JavaScript) can be both informative or confusing - reading JavaScript: The Good Parts (140+ pages) concurrently will certainly complement your understanding of JavaScript.
&lt;br /&gt;
&lt;br /&gt;In short this book is the most complete references for JavaScript as we've come to know it, it covers JavaScript from A-Z, it's permeated with good advice - and for good reasons too, this is its 5th Edition, it has been recognized as one of the best books in JavaScript, and has been reviewed or edited by some of the JavaScript greats: Peter-Paul Koch (ppk on JavaScript), and Douglas Crockford (JavaScript: The Good Parts) to name a few.
&lt;br /&gt;
&lt;br /&gt;I highly recommend this book, and am looking forward to Flanagan's newest book The Ruby Programming Language.
&lt;br /&gt;</Content>
    <Date>2008-02-29T00:00:00</Date>
    <HelpfulVotes>2</HelpfulVotes>
    <TotalVotes>2</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0596101996</ASIN>
    <Title>JavaScript: The Definitive Guide</Title>
    <AuthorsMLA>Flanagan David.</AuthorsMLA>
    <Authors>David Flanagan</Authors>
    <Url>http://www.amazon.com/JavaScript-Definitive-Guide-David-Flanagan/dp/0596101996%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0596101996</Url>
    <ImageUrl>http://images.amazon.com/images/P/0596101996.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>O'Reilly Media, Inc.</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0596101996?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596101996</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>Average Book, Embarrassing Framework</Summary>
    <Content>Update: it's been announced that jQuery will ship with ASP.NET AJAX and Visual Studio - this book and review is now outdated.
&lt;br /&gt;
&lt;br /&gt;Original Review: Take this book and the ASP.NET AJAX Framework with two grains of salt, if you're serious about AJAX then learn JavaScript and look into the alternative AJAX Libraries like: jQuery, Scriptaculous, Dojo, Mootools, and YUI. 
&lt;br /&gt;
&lt;br /&gt;This book lacks objectivity and often suffers from hype. The authors came across as lacking proficient experience with the JavaScript language, or exposure to other AJAX Frameworks / Libraries, or sufficient experience using the ASP.NET AJAX Framework in real world situations.
&lt;br /&gt;
&lt;br /&gt;Comments like: "we recommend that...", "because it makes no sense...", "you must understand X,Y,Z to run complex client-side code without writing a single line of JavaScript" were discouraging, and always left me hanging. Good books answer more than the "hows" - comments like "you must rely on a special..." are a cry for more research. 
&lt;br /&gt;
&lt;br /&gt;The book skims over the bigger picture of why the ASP.NET AJAX framework is implemented, or where its going. Instead it presented many examples of "how-to" implement the various ASP.NET AJAX constructs and patterns. It would have been nice to see some real world examples of why the ASP.NET AJAX client-side typing system is useful, or why the AJAX Framework's extended JavaScript objects are useful and how these contrast to what JavaScript already provides, or what happens behind the scenes when a class is registered through client-side code, or why the AJAX Framework prefers declarative syntax (XML) over imperative syntax, and to have some real in-depth discussions on performance implications. 
&lt;br /&gt;
&lt;br /&gt;In addition to these disappointments, the ASP.NET AJAX Framework itself has serious technical flaws, it's too heavy weighted (bloated) for practical use - aside from demos you won't see this framework used in the real world. It's a short lived framework, many of the other AJAX Libraries already offer superior performance and better user experience  I was disappointed with the server-centric approach the ASP.NET AJAX Framework and this book take, and was disappointed to have JavaScript continually swept under the carpet as magic.  </Content>
    <Date>2008-04-20T00:00:00</Date>
    <HelpfulVotes>12</HelpfulVotes>
    <TotalVotes>20</TotalVotes>
    <Rating>2</Rating>
    <ASIN>1933988142</ASIN>
    <Title>ASP.NET AJAX in Action</Title>
    <AuthorsMLA>Gallo Alessandro, Barkol David, and Vavilala Rama.</AuthorsMLA>
    <Authors>Alessandro Gallo, David Barkol, Rama Vavilala</Authors>
    <Url>http://www.amazon.com/ASP-NET-AJAX-Action-Alessandro-Gallo/dp/1933988142%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1933988142</Url>
    <ImageUrl>http://images.amazon.com/images/P/1933988142.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>Manning Publications</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/1933988142?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1933988142</ProductPreviewUrl>
  </Review>
  <Review>
    <Summary>Approachable, no non-sense, thrilling to read, an excellent reference, proof that great books don't have to be huge</Summary>
    <Content>Weighing in at 140+ pages of content, this book cuts through the obscurities, pleasantries, and filler found in most technical books. Instead, this book dives straight into the heart of the JavaScript language. It presents the clearest comprehensive explanation of what makes JavaScript a great programming language that I've encountered to date. It nails the important concepts, like JavaScript's: object oriented nature, its classless (pseudoclassical) nature, and functional nature. While covering the fundamentals like JavaScript's: functions, lexical scoping, lambdas, prototypal inheritance, and functional inheritance.
&lt;br /&gt;
&lt;br /&gt;This book's size makes it approachable for all audiences, its style is terse and concise. This book has the potential to do for JavaScript, what Richie's inspirational classic the C Programming Language did for the C language. 
&lt;br /&gt;
&lt;br /&gt;JavaScript is the programming language of the web (AJAX), and this book will guide you through the good parts of this often misunderstood language - while this book is an excellent reference, it is not intended to replace JavaScript: The Definitive Guide, you'll do best to have both these books on hand.
&lt;br /&gt;
&lt;br /&gt;If you enjoyed (or are considering) this book then you may want to hear more of what Douglas Crockford has to say, check out his great JavaScript video series on the YUI Theater.</Content>
    <Date>2008-06-07T00:00:00</Date>
    <HelpfulVotes>6</HelpfulVotes>
    <TotalVotes>6</TotalVotes>
    <Rating>5</Rating>
    <ASIN>0596517742</ASIN>
    <Title>JavaScript: The Good Parts</Title>
    <AuthorsMLA>Crockford Douglas.</AuthorsMLA>
    <Authors>Douglas Crockford</Authors>
    <Url>http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742%3FSubscriptionId%3D1MRFMGASE6CQKS2WTMR2%26tag%3Dadamkahtavaap-20%26linkCode%3Dsp1%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0596517742</Url>
    <ImageUrl>http://images.amazon.com/images/P/0596517742.01._SCTZZZZZZZ_.jpg</ImageUrl>
    <Publisher>O'Reilly Media, Inc.</Publisher>
    <ProductPreviewUrl>http://www.amazon.com/gp/product/0596517742?ie=UTF8&amp;tag=adamkahtavaap-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596517742</ProductPreviewUrl>
  </Review>
</ArrayOfReview>